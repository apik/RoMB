#include "romb.h"
int main()
{
  try
    {
      symbol k("k"),q("q"),p("p"),p1("p1"),p2("p2"),p3("p3"),ms("ms"),l("l"),s("s"),m1s("m1s"),m2s("m2s"),m3s("m3s");
      symbol l1("l1"),l2("l2"),l3("l3"),l4("l4"),t("t"),p4("p4"),p5("p5"),p6("p6"),tp("tp"),v1("v1"),v2("v2"),l5("l5");
      symbol k1("k1"),k2("k2"),k3("k3"),k4("k4"),k5("k5"),ms1("ms1"),ms2("ms2"),ms3("ms3"),ms4("ms4");
      symbol s12("s12"),s23("s23"),s34("s34"),s45("s45"),s51("s51"),s13("s13"),s15("s15"),s56("s56"),s16("s16"),s123("s123"),s234("s234"),s345("s345");
      lst inv_l;
      inv_l.append(p1*p1 == 0);
      inv_l.append( p2*p2 == 0);inv_l.append( p3*p3  ==  0);inv_l.append( p4*p4  ==  0);inv_l.append( p5*p5  ==  0);inv_l.append( p6*p6  ==  0);
      inv_l.append(p1* p2  ==  s12/2);inv_l.append( p2* p3  ==  s23/2);inv_l.append( p3* p4  ==  s34/2);inv_l.append( p4* p5  ==  s45/2);
      inv_l.append(p5* p6  ==  s56/2);inv_l.append( p1* p6  ==  s16/2);inv_l.append( p1* p3  ==  (-s12 + s123 - s23)/2);
      inv_l.append(p2* p4  ==  (-s23 + s234 - s34)/2);
      inv_l.append( p3* p5  ==  (-s34 + s345 - s45)/2);
      inv_l.append(p1* p4  ==  (-s123 + s23 - s234 + s56)/2);
      inv_l.append(p1* p5  ==  (-s16 + s234 - s56)/2);
      inv_l.append( p2* p5  ==  (s16 - s234 + s34 - s345)/2);
      inv_l.append( p2* p6  ==  (-s12 - s16 + s345)/2);
      inv_l.append( p3* p6  ==  (s12 - s123 - s345 + s45)/2);
      inv_l.append( p4* p6  ==  (s123 - s45 - s56)/2);
      
      
      RoMB_loop_by_loop hexag(lst(k1),
                              lst(-pow(p1 + k1,2),-pow(p1 + p2 + k1,2),
                                  -pow(p1 + p2 + p3 + k1,2),
                                  -pow(p1 + p2 + p3 + p4 + k1,2),
                                  -pow(p1+p2+p3+p4+p5+k1,2),-pow(k1,2)),
                              inv_l,
                              lst(1,1,1,1,1,1),true);
      hexag.integrate_map(lst(s12 == -1, s23 == -2, s34 == -3, s45 == -4, s56 == -5, s16 == -6, s123 == -7, s234 == -8, s345 == -9));
      
      /*
       FRESULT for parameters: {s12==-1,s23==-2,s34==-3,s45==-4,s56==-5,s16==-6,s123==-7,s234==-8,s345==-9}
       
        FRESULT anl :           = -1.0832553427901423826+487/60480*log(6)^2+43/7560*log(5)*log(6)+1/96*log(2)*log(6)-179/30240*log(9)*log(5)+43/1008*eps^(-2)-37/1512*log(2)*log(8)-89/4320*log(9)*log(4)+1/480*log(4)*log(5)+19/1260*log(8)^2-1/480*log(5)*log(7)-1/224*log(2)*log(7)+31/3360*log(7)^2+89/8640*log(4)^2-37/2520*log(9)*log(8)-1/54*log(2)*log(4)+1/80*log(9)*log(7)+47/12096*log(5)^2-431/30240*log(9)*log(6)-1/480*log(4)*log(7)+13/3360*log(3)*log(7)+7/864*log(9)*log(2)-1/30240*(9980.3808316751115095+66*log(9)+1055*log(2)+803*log(3)-912*log(8)-497*log(4)+235*log(5)+487*log(6)-198*log(7))*eps^(-1)-43/7560*log(8)*log(6)-37/1512*log(3)*log(8)-1/168*log(8)*log(7)+37/1512*log(2)*log(3)+803/60480*log(3)^2+71/4320*log(9)*log(3)+37/2016*log(9)^2+1/54*log(8)*log(4)+1/480*log(3)*log(5)+211/12096*log(2)^2+43/3024*Pi^2-43/7560*log(8)*log(5)-71/4320*log(3)*log(4)-1/96*log(6)*log(7)
         FRESULT num:           = -0.9103131906732882823+(0.04265873015873015873)*eps^(-2)-(0.3313137954697442033)*eps^(-1)
          eps^-2 term: 43/1008 +/- 0
           eps^-1 term: -0.33003904866650501023-11/5040*log(9)-211/6048*log(2)-803/30240*log(3)+19/630*log(8)+71/4320*log(4)-47/6048*log(5)-487/30240*log(6)+11/1680*log(7) +/- 2.3499093992765307012E-4
            eps^0 term: -1.0832553427901423826+487/60480*log(6)^2+43/7560*log(5)*log(6)+1/96*log(2)*log(6)-179/30240*log(9)*log(5)-37/1512*log(2)*log(8)-89/4320*log(9)*log(4)+1/480*log(4)*log(5)+19/1260*log(8)^2-1/480*log(5)*log(7)-1/224*log(2)*log(7)+31/3360*log(7)^2+89/8640*log(4)^2-37/2520*log(9)*log(8)-1/54*log(2)*log(4)+1/80*log(9)*log(7)+47/12096*log(5)^2-431/30240*log(9)*log(6)-1/480*log(4)*log(7)+13/3360*log(3)*log(7)+7/864*log(9)*log(2)-43/7560*log(8)*log(6)-37/1512*log(3)*log(8)-1/168*log(8)*log(7)+37/1512*log(2)*log(3)+803/60480*log(3)^2+71/4320*log(9)*log(3)+37/2016*log(9)^2+1/54*log(8)*log(4)+1/480*log(3)*log(5)+211/12096*log(2)^2+43/3024*Pi^2-43/7560*log(8)*log(5)-71/4320*log(3)*log(4)-1/96*log(6)*log(7) +/- 0.0013672699295988809575
            
            
      */
    }
  catch(std::exception &p)
    {
      std::cerr<<"******************************************************************"<<endl;
      std::cerr<<"   >>>ERROR:  "<<p.what()<<endl;
      std::cerr<<"******************************************************************"<<endl;
      return 1;
    }
  return 0;
}
